//FONT-SIZE
@function calculateRem($size) {
    $remSize: $size / $font-default;
    @return $remSize * 1rem;
  }
  @mixin font-size($size) {
    font-size: $size;
    font-size: calculateRem($size);
  }
  
  // CUSTON UNDERLINE
  @mixin linearUnderline {
    text-decoration: underline;
    text-decoration-color: #f5c226;
  }
  
  // HOVER
  @mixin hover {
    &:hover {
      @content;
    }
  }
  
  // HOVER FOCUS
  @mixin hover-focus {
    &:hover,
    &:focus {
      @content;
    }
  }
  
  // PLAIN HOVER FOCUS
  @mixin plain-hover-focus {
    &,
    &:hover,
    &:focus {
      @content;
    }
  }
  
  // HOVER FOCUS ACTIVE
  @mixin hover-focus-active {
    &:hover,
    &:focus,
    &:active {
      @content;
    }
  }
  
  // UNSTYLED LIST
  @mixin list-unstyled {
    padding-left: 0;
    list-style: none;
  }
  
  // TRUNCATE TEXT
  @mixin text-truncate() {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }
  
  // HIDE TEXT
  @mixin text-hide($ignore-warning: false) {
    // stylelint-disable-next-line font-family-no-missing-generic-family-keyword
    font: 0/0 a;
    color: transparent;
    text-shadow: none;
    background-color: transparent;
    border: 0;
  }
  
  // ADD VENDOR PREFIXES TO ANY CSS PROPERTY
  @mixin css3-prefix($prop, $value) {
    -webkit-#{$prop}: #{$value};
    -moz-#{$prop}: #{$value};
    -ms-#{$prop}: #{$value};
    -o-#{$prop}: #{$value};
    #{$prop}: #{$value};
  }
  
  // KEYFRAME ANIMATIONS
  @mixin keyframes($name) {
    @-webkit-keyframes #{$name} {
      @content;
    }
  
    @-moz-keyframes #{$name} {
      @content;
    }
  
    @keyframes #{$name} {
      @content;
    }
  }
  
  // TRANSITION
  @mixin transition($transition-property, $transition-time, $method) {
    @include css3-prefix(
      transition,
      $transition-property $transition-time $method
    );
  }
  
  //OPACITY
  @mixin opacity($opacity) {
    opacity: $opacity;
    $opacity-ie: $opacity * 100;
    filter: alpha(opacity=$opacity-ie); //IE8
  }
  
  //CLEARFIX
  @mixin clearfix() {
    &:before,
    &:after {
      content: '';
      display: table;
    }
    &:after {
      clear: both;
    }
  }
  
  // GRADIENTS
  @mixin background-gradient($start-color, $end-color, $orientation) {
    background: $start-color;
  
    @if $orientation == 'vertical' {
      background: -webkit-linear-gradient(top, $start-color, $end-color);
      background: linear-gradient(to bottom, $start-color, $end-color);
    } @else if $orientation == 'horizontal' {
      background: -webkit-linear-gradient(left, $start-color, $end-color);
      background: linear-gradient(to right, $start-color, $end-color);
    } @else {
      background: -webkit-radial-gradient(
        center,
        ellipse cover,
        $start-color,
        $end-color
      );
      background: radial-gradient(ellipse at center, $start-color, $end-color);
    }
  }
  
  // RETINA-READY IMAGES
  @mixin retina-image($image, $width, $height) {
    @media (min--moz-device-pixel-ratio: 1.3),
      (-o-min-device-pixel-ratio: 2.6/2),
      (-webkit-min-device-pixel-ratio: 1.3),
      (min-device-pixel-ratio: 1.3),
      (min-resolution: 1.3dppx) {
      background-image: url($image);
      background-size: $width $height;
    }
  }
  
  // ABSOLUTE POSITIONING
  @mixin abs-position($top, $right, $bottom, $left) {
    position: absolute;
    top: $top;
    right: $right;
    bottom: $bottom;
    left: $left;
  }
  
  //CENTERING ELEMENTS
  
  @mixin center($position) {
    @if $position == 'vertical' {
      top: 50%;
      @include css3-prefix(transform, translateY(-50%));
    } @else if $position == 'horizontal' {
      left: 50%;
      @include css3-prefix(transform, translateX(-50%));
    } @else if $position == 'both' {
      top: 50%;
      left: 50%;
      @include css3-prefix(transform, translate(-50%, -50%));
    }
  }
  
  // ARROW WITH FOUR OPTIONAL DIRECTIONS
  @mixin arrow($direction: down, $size: 5px, $color: #555) {
    width: 0;
    height: 0;
  
    @if ($direction==left) {
      border-top: $size solid transparent;
      border-bottom: $size solid transparent;
      border-right: $size solid $color;
    } @else if ($direction==right) {
      border-top: $size solid transparent;
      border-bottom: $size solid transparent;
      border-left: $size solid $color;
    } @else if ($direction==down) {
      border-left: $size solid transparent;
      border-right: $size solid transparent;
      border-top: $size solid $color;
    } @else {
      border-left: $size solid transparent;
      border-right: $size solid transparent;
      border-bottom: $size solid $color;
    }
  }
  
  // MEDIA QUERIES FOR MOBILE-FIRST DESIGN
  @mixin breakpoint($point) {
    @if $point==tvscreen {
      @media only screen and (min-width: $xl) {
        @content;
      }
    } @else if $point==desktop {
      @media only screen and (min-width: $lg) {
        @content;
      }
    } @else if $point==tablet {
      @media only screen and (min-width: $md) {
        @content;
      }
    } @else if $point==mobile {
      @media only screen and (min-width: $xs) {
        @content;
      }
    }
  }
  
  @mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
    $min: breakpoint-min($name, $breakpoints);
  
    @if $min {
      @media (min-width: $min) {
        @content;
      }
    } @else {
      @content;
    }
  }
  
  // FIXED ASPECT RATIO
  @mixin aspect-ratio($width, $height) {
    position: relative;
  
    &:before {
      display: block;
      content: '';
      width: 100%;
      padding-top: ($height / $width) * 100%;
    }
  
    > .inner-box {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
    }
  }
  
  // LINE CLAMP
  @mixin line-clamp($number) {
    display: -webkit-box;
    -webkit-line-clamp: $number;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  //COVER BG
  @mixin cover-background {
    background-repeat: no-repeat;
    background-size: cover;
    background-position: center;
  }
  
  //OTHERS
  @mixin text-emphasis-variant($parent, $color) {
    #{$parent} {
      color: $color !important;
    }
  
    @if $emphasized-link-hover-darken-percentage !=0 {
      a#{$parent} {
        @include hover-focus {
          color: darken(
            $color,
            $emphasized-link-hover-darken-percentage
          ) !important;
        }
      }
    }
  }
  
  //generate utilities
  @mixin generate-utility($utility, $infix) {
    $values: map-get($utility, values);
  
    // If the values are a list or string, convert it into a map
    @if type-of($values) == 'string' or type-of(nth($values, 1)) != 'list' {
      $values: zip($values, $values);
    }
  
    @each $key, $value in $values {
      $properties: map-get($utility, property);
  
      // Multiple properties are possible, for example with vertical or horizontal margins or paddings
      @if type-of($properties) == 'string' {
        $properties: append((), $properties);
      }
  
      // Use custom class if present
      $property-class: if(
        map-has-key($utility, class),
        map-get($utility, class),
        nth($properties, 1)
      );
      $property-class: if($property-class==null, '', $property-class);
  
      $infix: if(
        $property-class== '' and str-slice($infix, 1, 1) == '-',
        str-slice($infix, 2),
        $infix
      );
  
      // Don't prefix if value key is null (eg. with shadow class)
      $property-class-modifier: if(
        $key,
        if($property-class== '' and $infix== '', '', '-') + $key,
        ''
      );
  
      .#{$property-class + $infix + $property-class-modifier} {
        @each $property in $properties {
          // stylelint-disable-next-line declaration-no-important
          #{$property}: $value !important;
        }
      }
    }
  }
  
  @function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);
  
    @if $index {
      @return str-slice($string, 1, $index - 1) + $replace +
        str-replace(
          str-slice($string, $index + str-length($search)),
          $search,
          $replace
        );
    }
  
    @return $string;
  }
  
  // FONT-FACE RULE
  
  @mixin font-face(
    $name,
    $path,
    $weight: null,
    $style: null,
    $exts: eot woff2 woff ttf svg
  ) {
    $src: null;
  
    $extmods: (
      eot: '?',
      svg: '#' + str-replace($name, ' ', '_')
    );
    $formats: (
      otf: 'opentype',
      ttf: 'truetype'
    );
  
    @each $ext in $exts {
      $extmod: if(
        map-has-key($extmods, $ext),
        $ext + map-get($extmods, $ext),
        $ext
      );
      $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
      $src: append(
        $src,
        url(quote($pathFonts + $path + '.' + $extmod)) format(quote($format)),
        comma
      );
    }
  
    @font-face {
      font-family: quote($name);
      font-style: $style;
      font-weight: $weight;
      font-display: swap;
      src: $src;
    }
  }